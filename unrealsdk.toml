[unrealsdk]
# If true, creates an external console window mirroring what is written to the game's console.
# Always enabled in debug builds.
external_console = false

# The file to write log messages to, relative to the dll.
log_file = "unrealsdk.log"

# Changes the default logging level used in the unreal console; ERR, WARN, INFO, DWRN, MISC
console_log_level = "INFO"

# The default console key set when one is not already bound. If a key is already bound via standard
# unreal facilities, this is ignored.
console_key = "Tilde"

# If true, locks simultaneous unreal function calls from different threads. This lock is held both
# during hooks and when you manually call unreal functions.
# When true, if external code must take care with it's own locks. If external code attempts to
# acquire a lock inside a hook, while at the same time trying to call an unreal function on the
# thread which holds that lock, the system will deadlock.
locking_function_calls = true

# After enabling `unrealsdk::hook_manager::log_all_calls`, the file to calls are logged to.
log_all_calls_file = "unrealsdk.calls.tsv"

# vtable index for change events; I eyeballed these, probably wrong; PreEditChange = 0x11
uobject_post_edit_change_property_vf_index = 19
# uobject_post_edit_change_chain_property_vf_index = 21

[mod_manager]
display_version = "v1.2"

[modloader]
# Full stacktrace when exceptions occur during mod loading
full_trace = false

# Additional Directories to load mods from; Best to use absolute paths. Additionally, all mod
#  directories are added to the path before any mods are imported. This allows you to import and
#  use mods from directories that may not be available otherwise.
additional_mod_dirs = [
    # "G:/Games/BL1_Modding/bl1_sdk_mods/src/py",  # / or \\ can be used \ alone can not.
]

[pyunrealsdk]
init_script = "../sdk_mods/__main__.py"
pyexec_root = "../sdk_mods"
